// <auto-generated />
using System;
using FYP.DB.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FYP.DB.Migrations
{
    [DbContext(typeof(FYPContext))]
    partial class FYPContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FYP.DB.DBTables.Account_Journal", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("account")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("account_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("credit")
                        .HasColumnType("money");

                    b.Property<decimal?>("debit")
                        .HasColumnType("money");

                    b.HasKey("ID");

                    b.ToTable("Account_Journal");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Account_Move", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("Date_Created")
                        .HasColumnType("date");

                    b.Property<string>("Doc_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Source_Doc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double?>("Taxed_Amount")
                        .HasColumnType("float");

                    b.Property<decimal?>("Total_Amount")
                        .HasColumnType("money");

                    b.Property<string>("operation_type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("paid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("purchase_source_doc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double?>("tax")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex(new[] { "Source_Doc" }, "IX_Account_Move_Source_Doc");

                    b.HasIndex(new[] { "purchase_source_doc" }, "IX_Account_Move_purchase_source_doc");

                    b.ToTable("Account_Move");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Billing_Address", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("Billing_Address1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Billing_Address");

                    b.Property<int>("customer_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("customer_id");

                    b.ToTable("Billing_Address");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Category", b =>
                {
                    b.Property<int>("category_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("category_id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("category_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("created_on")
                        .HasColumnType("date");

                    b.Property<DateTime?>("last_modified")
                        .HasColumnType("date");

                    b.HasKey("category_id")
                        .HasName("PK__category__D54EE9B4C97CD641");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Customer", b =>
                {
                    b.Property<int>("customer_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("customer_id"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("customer_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<long>("phone")
                        .HasColumnType("bigint");

                    b.Property<double?>("record")
                        .HasColumnType("float");

                    b.HasKey("customer_id")
                        .HasName("PK__customer__CD65CB85B0A0220F");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Invoice_line", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<int>("account_id")
                        .HasColumnType("int");

                    b.Property<decimal>("price")
                        .HasColumnType("money");

                    b.Property<int>("product_id")
                        .HasColumnType("int");

                    b.Property<int>("qty")
                        .HasColumnType("int");

                    b.Property<double>("taxes")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex(new[] { "account_id" }, "IX_Invoice_lines_account_id");

                    b.ToTable("Invoice_lines");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Payment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("method_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("id")
                        .HasName("PK__payment__3213E83F24B9F395");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Product", b =>
                {
                    b.Property<int>("product_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("product_id"));

                    b.Property<int>("category_id")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<bool>("discontinued")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("quantity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("reorder_level")
                        .HasColumnType("int");

                    b.Property<decimal?>("unit_price")
                        .IsRequired()
                        .HasColumnType("money");

                    b.HasKey("product_id")
                        .HasName("PK__product__47027DF5AED1C8E3");

                    b.HasIndex(new[] { "category_id" }, "IX_Product_category_id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Purchase_Order", b =>
                {
                    b.Property<int>("purchase_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("purchase_id"));

                    b.Property<decimal>("cost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.99))");

                    b.Property<DateTime?>("create_date")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<string>("doc_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("payment_method")
                        .HasColumnType("int");

                    b.Property<string>("state")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("('RFQ')");

                    b.Property<int>("vendor_id")
                        .HasColumnType("int");

                    b.HasKey("purchase_id")
                        .HasName("PK__purchase__87071CB979BDBC6D");

                    b.HasIndex(new[] { "doc_name" }, "AK_Purchase_Order_doc_name")
                        .IsUnique();

                    b.HasIndex(new[] { "doc_name" }, "IX_Purchase_Order")
                        .IsUnique();

                    b.HasIndex(new[] { "payment_method" }, "IX_Purchase_Order_payment_method");

                    b.HasIndex(new[] { "vendor_id" }, "IX_Purchase_Order_vendor_id");

                    b.ToTable("Purchase_Order");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Purchase_Order_Detail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal?>("price")
                        .IsRequired()
                        .HasColumnType("money");

                    b.Property<int?>("product_id")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("purchase_id")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("quantity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("ID")
                        .HasName("PK_purchase_order_details");

                    b.HasIndex(new[] { "product_id" }, "IX_Purchase_Order_Details_product_id");

                    b.HasIndex(new[] { "purchase_id" }, "IX_Purchase_Order_Details_purchase_id");

                    b.ToTable("Purchase_Order_Details");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Review", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("customer_id")
                        .HasColumnType("int");

                    b.Property<int?>("product_id")
                        .HasColumnType("int");

                    b.Property<byte?>("stars")
                        .HasColumnType("tinyint");

                    b.HasKey("id")
                        .HasName("PK__reviews__3213E83FCAF32842");

                    b.HasIndex(new[] { "customer_id" }, "IX_Reviews_customer_id");

                    b.HasIndex(new[] { "product_id" }, "IX_Reviews_product_id");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Sale_Order", b =>
                {
                    b.Property<int>("sale_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("sale_id"));

                    b.Property<int>("customer_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("date_created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("payment_method")
                        .HasColumnType("int");

                    b.Property<string>("state")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("('Quotation')");

                    b.Property<decimal>("total_amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.HasKey("sale_id")
                        .HasName("PK__sale_ord__E1EB00B23F3E713F");

                    b.HasIndex(new[] { "name" }, "AK_Sale_Order_name")
                        .IsUnique();

                    b.HasIndex(new[] { "name" }, "IX_Sale_Order_1")
                        .IsUnique();

                    b.HasIndex(new[] { "customer_id" }, "IX_Sale_Order_customer_id");

                    b.HasIndex(new[] { "payment_method" }, "IX_Sale_Order_payment_method");

                    b.ToTable("Sale_Order");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Sale_Order_Detail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<int>("product_id")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("sale_id")
                        .HasColumnType("int");

                    b.HasKey("ID")
                        .HasName("PK_sale_order_details");

                    b.HasIndex(new[] { "product_id" }, "IX_Sale_Order_Details_product_id");

                    b.HasIndex(new[] { "sale_id" }, "IX_Sale_Order_Details_sale_id");

                    b.ToTable("Sale_Order_Details");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Shipping_Address", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("Shipping_Address1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Shipping_Address");

                    b.Property<int>("customer_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("customer_id");

                    b.ToTable("Shipping_Address");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Transfer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Doc_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Source_Document")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("backorder_doc_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("date");

                    b.Property<string>("operation_type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID")
                        .HasName("PK__transfer__3214EC2768AF2B94");

                    b.HasIndex(new[] { "backorder_doc_id" }, "IX_Transfers_backorder_doc_id");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Transfer_Detail", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("demand")
                        .HasColumnType("int");

                    b.Property<int?>("done")
                        .HasColumnType("int");

                    b.Property<int>("product_id")
                        .HasColumnType("int");

                    b.Property<int>("transfer_id")
                        .HasColumnType("int");

                    b.HasKey("id")
                        .HasName("PK__transfer__3213E83FFF168FCA");

                    b.HasIndex(new[] { "product_id" }, "IX_Transfer_Details_product_id");

                    b.HasIndex(new[] { "transfer_id" }, "IX_Transfer_Details_transfer_id");

                    b.ToTable("Transfer_Details");
                });

            modelBuilder.Entity("FYP.DB.DBTables.User_Auth", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("role")
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("User_Auth");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Vendor", b =>
                {
                    b.Property<int>("vendor_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("vendor_id"));

                    b.Property<long?>("NTN")
                        .HasColumnType("bigint");

                    b.Property<string>("email_address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<long>("phone_number")
                        .HasColumnType("bigint");

                    b.Property<string>("vendor_address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("website")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("vendor_id")
                        .HasName("PK__vendor_m__0F7D2B7841498D66");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Account_Move", b =>
                {
                    b.HasOne("FYP.DB.DBTables.Sale_Order", "Source_DocNavigation")
                        .WithMany("Account_Moves")
                        .HasForeignKey("Source_Doc")
                        .HasPrincipalKey("name")
                        .HasConstraintName("FK_Account_Move_Sale_Order");

                    b.HasOne("FYP.DB.DBTables.Purchase_Order", "purchase_source_docNavigation")
                        .WithMany("Account_Moves")
                        .HasForeignKey("purchase_source_doc")
                        .HasPrincipalKey("doc_name")
                        .HasConstraintName("FK_Account_Move_Purchase_Order");

                    b.Navigation("Source_DocNavigation");

                    b.Navigation("purchase_source_docNavigation");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Billing_Address", b =>
                {
                    b.HasOne("FYP.DB.DBTables.Customer", "customer")
                        .WithMany("Billing_Addresses")
                        .HasForeignKey("customer_id")
                        .IsRequired()
                        .HasConstraintName("FK_Billing Address_Customers");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Invoice_line", b =>
                {
                    b.HasOne("FYP.DB.DBTables.Account_Move", "account")
                        .WithMany("Invoice_lines")
                        .HasForeignKey("account_id")
                        .IsRequired()
                        .HasConstraintName("FK_Invoice_lines_Account_Move");

                    b.Navigation("account");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Product", b =>
                {
                    b.HasOne("FYP.DB.DBTables.Category", "category")
                        .WithMany("Products")
                        .HasForeignKey("category_id")
                        .IsRequired()
                        .HasConstraintName("FK_product_category");

                    b.Navigation("category");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Purchase_Order", b =>
                {
                    b.HasOne("FYP.DB.DBTables.Payment", "payment_methodNavigation")
                        .WithMany("Purchase_Orders")
                        .HasForeignKey("payment_method")
                        .IsRequired()
                        .HasConstraintName("FK_purchase_order_payment");

                    b.HasOne("FYP.DB.DBTables.Vendor", "vendor")
                        .WithMany("Purchase_Orders")
                        .HasForeignKey("vendor_id")
                        .IsRequired()
                        .HasConstraintName("FK_purchase_order_vendor_master");

                    b.Navigation("payment_methodNavigation");

                    b.Navigation("vendor");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Purchase_Order_Detail", b =>
                {
                    b.HasOne("FYP.DB.DBTables.Product", "product")
                        .WithMany("Purchase_Order_Details")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_purchase_order_details_product");

                    b.HasOne("FYP.DB.DBTables.Purchase_Order", "purchase")
                        .WithMany("Purchase_Order_Details")
                        .HasForeignKey("purchase_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_purchase_order_details_purchase_order");

                    b.Navigation("product");

                    b.Navigation("purchase");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Review", b =>
                {
                    b.HasOne("FYP.DB.DBTables.Customer", "customer")
                        .WithMany("Reviews")
                        .HasForeignKey("customer_id")
                        .HasConstraintName("FK_reviews_customers");

                    b.HasOne("FYP.DB.DBTables.Product", "product")
                        .WithMany("Reviews")
                        .HasForeignKey("product_id")
                        .HasConstraintName("FK_reviews_product");

                    b.Navigation("customer");

                    b.Navigation("product");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Sale_Order", b =>
                {
                    b.HasOne("FYP.DB.DBTables.Customer", "customer")
                        .WithMany("Sale_Orders")
                        .HasForeignKey("customer_id")
                        .IsRequired()
                        .HasConstraintName("FK_sale_order_customers");

                    b.HasOne("FYP.DB.DBTables.Payment", "payment_methodNavigation")
                        .WithMany("Sale_Orders")
                        .HasForeignKey("payment_method")
                        .IsRequired()
                        .HasConstraintName("FK_sale_order_payment");

                    b.Navigation("customer");

                    b.Navigation("payment_methodNavigation");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Sale_Order_Detail", b =>
                {
                    b.HasOne("FYP.DB.DBTables.Product", "product")
                        .WithMany("Sale_Order_Details")
                        .HasForeignKey("product_id")
                        .IsRequired()
                        .HasConstraintName("FK_sale_order_details_product");

                    b.HasOne("FYP.DB.DBTables.Sale_Order", "sale")
                        .WithMany("Sale_Order_Details")
                        .HasForeignKey("sale_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_sale_order_details_sale_order");

                    b.Navigation("product");

                    b.Navigation("sale");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Shipping_Address", b =>
                {
                    b.HasOne("FYP.DB.DBTables.Customer", "customer")
                        .WithMany("Shipping_Addresses")
                        .HasForeignKey("customer_id")
                        .IsRequired()
                        .HasConstraintName("FK_Shipping_Address_Customers");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Transfer", b =>
                {
                    b.HasOne("FYP.DB.DBTables.Transfer", "backorder_doc")
                        .WithMany("Inversebackorder_doc")
                        .HasForeignKey("backorder_doc_id")
                        .HasConstraintName("FK_transfers_transfers");

                    b.Navigation("backorder_doc");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Transfer_Detail", b =>
                {
                    b.HasOne("FYP.DB.DBTables.Product", "product")
                        .WithMany("Transfer_Details")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_transfer_details_product");

                    b.HasOne("FYP.DB.DBTables.Transfer", "transfer")
                        .WithMany("Transfer_Details")
                        .HasForeignKey("transfer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_transfer_details_transfers");

                    b.Navigation("product");

                    b.Navigation("transfer");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Account_Move", b =>
                {
                    b.Navigation("Invoice_lines");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Customer", b =>
                {
                    b.Navigation("Billing_Addresses");

                    b.Navigation("Reviews");

                    b.Navigation("Sale_Orders");

                    b.Navigation("Shipping_Addresses");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Payment", b =>
                {
                    b.Navigation("Purchase_Orders");

                    b.Navigation("Sale_Orders");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Product", b =>
                {
                    b.Navigation("Purchase_Order_Details");

                    b.Navigation("Reviews");

                    b.Navigation("Sale_Order_Details");

                    b.Navigation("Transfer_Details");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Purchase_Order", b =>
                {
                    b.Navigation("Account_Moves");

                    b.Navigation("Purchase_Order_Details");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Sale_Order", b =>
                {
                    b.Navigation("Account_Moves");

                    b.Navigation("Sale_Order_Details");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Transfer", b =>
                {
                    b.Navigation("Inversebackorder_doc");

                    b.Navigation("Transfer_Details");
                });

            modelBuilder.Entity("FYP.DB.DBTables.Vendor", b =>
                {
                    b.Navigation("Purchase_Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
